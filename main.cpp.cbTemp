#include <iostream>
#include <vector>
#include <algorithm>

#include <GL/glew.h>
#include <SDL.h>

using namespace std;

const GLchar* strVertexShader(
	"#version 330\n"
	"in vec2 position;\n"
	"void main()\n"
	"{\n"
	"   gl_Position = vec4(position.xy, 0.0f, 1.0f);\n"
	"}\n"
	);

const GLchar* strFragmentShader(
	"#version 330\n"
	"out vec4 outputColor;\n"
	"void main()\n"
	"{\n"
	"   outputColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n"
	"}\n"
	);

int main(int argc, char* args[])
{
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
	{
		std::cout << "SDL initialisation failed" << std::endl;
		return 1;
	}
	else
		std::cout << "SDL initialised!" << std::endl;

	SDL_Window *window;

	//X, Y, Width, Height
	window = SDL_CreateWindow("Window Title", 100, 100, 600, 600, SDL_WINDOW_OPENGL);

	//Window opened now

	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);

	SDL_GLContext context = SDL_GL_CreateContext(window);
	std::cout << "Created OpenGL context!" << std::endl;

	glewExperimental = GL_TRUE;
	if (glewInit() != GLEW_OK)
		return 1;


	float vertices[] = {
		-0.5f, -0.5f, // bottom left
		0.5f, -0.5f, // bottom right
		0.0f, 0.5f // top
	};

	//Create vertex buffer object
	//Holds vertex data

	GLuint vbo;
	glGenBuffers(1, &vbo); //number of buffers, buffers to be initialised.
	glBindBuffer(GL_ARRAY_BUFFER, vbo);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);


	// Compile shader program

	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, 1, &strVertexShader, NULL); //final value length - null
	glCompileShader(vertexShader);

	GLuint fragShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragShader, 1, &strFragmentShader, NULL);
	glCompileShader(fragShader);

	GLint vertexStatus;
	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &vertexStatus);
	std::cout << "Vertex shader compile status: " << vertexStatus << std::endl;

	GLint fragStatus;
	glGetShaderiv(fragShader, GL_COMPILE_STATUS, &fragStatus);
	std::cout << "Fragment shader compile status: " << fragStatus << std::endl;


	// Create shader program - put our vert and frag shader together
	GLuint shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragShader);
	glBindFragDataLocation(shaderProgram, 0, "outColour");
	glLinkProgram(shaderProgram);
	glUseProgram(shaderProgram);

	std::cout << "Shader program created!" << std::endl;

	// Vertex Array Object - "points" to the vertex data it's connected to
	GLuint vao;
	glGenVertexArrays(1, &vao);
	glBindVertexArray(vao);

	GLint posAttrib = glGetAttribLocation(shaderProgram, "position");
	glEnableVertexAttribArray(posAttrib);
	glVertexAttribPointer(posAttrib, 2, GL_FLOAT, GL_FALSE, 0, 0); // attrib, components(1-4), type, normalised, stride, pointer

	SDL_Event event;
	bool looping = true;
	while (looping)
	{
		glClear(GL_COLOR_BUFFER_BIT);

		glDrawArrays(GL_TRIANGLES, 0, 3);

		SDL_GL_SwapWindow(window);
		SDL_PollEvent(&event);

		//if (event.type == SDL_QUIT)
		//	looping = false;
	}

	//while (getchar() != '\n') {}//Prevents application from closing without user input

	return 0;
}
